name: Quick CI

# A short version of the CI, designed to run in seconds (<200s) on every push.
# Runs lints, tests and coverage analysis only on ALL branches EXCEPT main.

on:
  push:
    branches-ignore:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - run: python -m pip install --upgrade pip && pip install nox
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Check python formatting and lints (ruff)
        run: nox -s ruff
      - name: Check rust formatting (rustfmt)
        run: nox -s rustfmt

  semver-checks:
    if: github.ref != 'refs/heads/main'
    needs: [fmt]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: obi1kenobi/cargo-semver-checks-action@v2

  check-msrv:
    needs: [fmt]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.56.0
          targets: x86_64-unknown-linux-gnu
          components: rust-src
      - uses: actions/setup-python@v5
        with:
          architecture: "x64"
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name != 'merge_group' }}
      - run: python -m pip install --upgrade pip && pip install nox
      - name: Prepare minimal package versions
        run: nox -s set-minimal-package-versions
      - run: nox -s check-all

    env:
      CARGO_BUILD_TARGET: x86_64-unknown-linux-gnu

  clippy:
    needs: [fmt]
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: true
      matrix:
        rust: [stable]
        platform: [
          {
            os: "macos-14",  # first available arm macos runner
            python-architecture: "arm64",
            rust-target: "aarch64-apple-darwin",
          },
          {
            os: "ubuntu-latest",
            python-architecture: "x64",
            rust-target: "x86_64-unknown-linux-gnu",
          },
          {
            os: "ubuntu-latest",
            python-architecture: "x64",
            rust-target: "powerpc64le-unknown-linux-gnu",
          },
          {
            os: "ubuntu-latest",
            python-architecture: "x64",
            rust-target: "s390x-unknown-linux-gnu",
          },
          {
            os: "ubuntu-latest",
            python-architecture: "x64",
            rust-target: "wasm32-wasi",
          },
          {
            os: "windows-latest",
            python-architecture: "x64",
            rust-target: "x86_64-pc-windows-msvc",
          },
          {
            os: "windows-latest",
            python-architecture: "x86",
            rust-target: "i686-pc-windows-msvc",
          },
        ]
        include:
          # Run beta clippy as a way to detect any incoming lints which may affect downstream users
          - rust: beta
            platform:
              {
                os: "ubuntu-latest",
                python-architecture: "x64",
                rust-target: "x86_64-unknown-linux-gnu",
              }
    name: clippy/${{ matrix.platform.rust-target }}/${{ matrix.rust }}
    continue-on-error: ${{ matrix.rust != 'stable' }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.platform.rust-target }}
          components: clippy,rust-src
      - uses: actions/setup-python@v5
        with:
          architecture: ${{ matrix.platform.python-architecture }}
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name != 'merge_group' }}
      - run: python -m pip install --upgrade pip && pip install nox
      - run: nox -s clippy-all
    env:
      CARGO_BUILD_TARGET: ${{ matrix.platform.rust-target }}

  tests:
    name: test ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest", "macos-14", "ubuntu-latest"]  # first available arm macos runner
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name != 'merge_group' }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src
      - run: python -m pip install --upgrade pip && pip install nox
      - run: nox -s test

  coverage:
    needs: [tests]
    name: coverage ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest", "macos-14", "ubuntu-latest"]  # first available arm macos runner
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name != 'merge_group' }}
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview,rust-src
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - run: python -m pip install --upgrade pip && pip install nox
      - run: nox -s coverage
      - uses: codecov/codecov-action@v4
        with:
          file: coverage.json
          name: ${{ matrix.os }}
          token: ${{ secrets.CODECOV_TOKEN }}